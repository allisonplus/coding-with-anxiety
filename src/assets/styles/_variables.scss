$bg: #272822;
$white: #fff;
$black: #111;
$mercury: #e5e5e5;
$robin: #00dbde;
$electric: #fcc00f;
$helio: #6f0ccf;

$zsh-text: #899;
$zsh-path-bg: #9b5fe0;
$zsh-branch-bg: #fed888;

$monospace: "Fira Mono", monospace;
$font-sans: "Open Sans", sans-serif;

$large-desktop: 1680px;
$desktop: 1366px;
$tablet-landscape: 1024px;
$tablet-portrait: 768px;
$phone-landscape: 640px;
$phone-portrait: 360px;

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Size mixin.
@mixin size($value) {
	$width: nth($value, 1);
	$height: $width;

	@if length($value) > 1 {
		$height: nth($value, 2);
	}

	@if is-size($height) {
		height: $height;
	} @else {
		@warn "`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.";
	}

	@if is-size($width) {
		width: $width;
	} @else {
		@warn "`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.";
	}
}

//--------------------------------------------------------------
// MEDIA QUERIES
//--------------------------------------------------------------
/// Pass Sass Map(s) or Number(s) to create custom media queries.
///
/// @example - scss  Usage
///   @include media(null, $tablet-portrait) {};
///
/// @example - css Output
///   @media and screen (max-width: $tablet-portrait)
@mixin media($min, $max) {

	// Create the media query.
	@if $min == null {
		@media only screen and (max-width: $max) {
			@content;
		}
	} @else if $max == null {
		@media only screen and (min-width: $min) {
			@content;
		}
	} @else {
		@media only screen and (min-width: $min) and (max-width: $max) {
			@content;
		}
	}
}

/// Shorthand mixin for offset positioning
/// @param {String} $position - Either `relative`, `absolute` or `fixed`
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  bottom: $bottom;
  left: $left;
  position: $position;
  right: $right;
  top: $top;
}

// Variables
// $item-count: 6;
// $item: 1 / $item-count;

// @keyframes scrollUp {
//   from {
//     transform: translateY(0);
//   }
//   to {
//     // transform: translateY((-100% / $item-count) * ($item-count - 1));
//     transform: translateY(-100%);
//   }
// }

/*topToBottom Animation*/
// @-webkit-keyframes bottomToTop {
// 	0% { opacity: 0; }
// 	5% { opacity: 0; -webkit-transform: translateY(50px); }
// 	10% { opacity: 1; -webkit-transform: translateY(0px); }
// 	25% { opacity: 1; -webkit-transform: translateY(0px); }
// 	30% { opacity: 0; -webkit-transform: translateY(-50px); }
// 	80% { opacity: 0; }
// 	100% { opacity: 0; }
// }

@keyframes scroll {
  0.0% {
      transform: translateY(0px)
  }
  3.70% {
      transform: translateY(0px)
  }
  11.11% {
      transform: translateY(-66px)
  }
  14.81% {
      transform: translateY(-66px)
  }
  22.22% {
      transform: translateY(-132px)
  }
  25.92% {
      transform: translateY(-132px)
  }
  33.33% {
      transform: translateY(-198px)
  }
  37.03% {
      transform: translateY(-198px)
  }
  44.44% {
      transform: translateY(-264px)
  }
  48.14% {
      transform: translateY(-264px)
  }
  55.55% {
      transform: translateY(-330px)
  }
  59.25% {
      transform: translateY(-330px)
  }
  66.66% {
      transform: translateY(-396px)
  }
  70.37% {
      transform: translateY(-396px)
  }
  77.77% {
      transform: translateY(-462px)
  }
  81.48% {
      transform: translateY(-462px)
  }
  88.88% {
      transform: translateY(-528px)
  }
  92.59% {
      transform: translateY(-528px)
  }
  100% {
      transform: translateY(-594px)
  }
}
